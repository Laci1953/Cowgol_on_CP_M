typedef Word is uint32;
record Operand is end record;
const INSTRUCTION_TEMPLATE_DEPTH := 8;
const INSTRUCTION_TEMPLATE_COUNT := 178;
const REGISTER_COUNT := 16;
const ALL_REGS := 0xffff;
const OPERAND_REGS := 0x0;
typedef RegId is int(0, ALL_REGS);
typedef NodeBitmap is int(0, 0xff);
record Register is
	name: string;
	id: RegId;
	uses: RegId;
	compatible: RegId;
	is_stacked: uint8;
end record;
const REGCLASS_RX := 0x6000;
const REGCLASS_R32 := 0x1c00;
const REGCLASS_R16 := 0x6380;
const REGCLASS_R8 := 0x2b;
const REG_PARAM := 0x8000;
const REG_IY := 0x4000;
const REG_IX := 0x2000;
const REG_BCBC := 0x1000;
const REG_DEDE := 0x800;
const REG_HLHL := 0x400;
const REG_BC := 0x200;
const REG_DE := 0x100;
const REG_HL := 0x80;
const REG_L := 0x40;
const REG_H := 0x20;
const REG_E := 0x10;
const REG_D := 0x8;
const REG_C := 0x4;
const REG_B := 0x2;
const REG_A := 0x1;
const REGCLASS_ALL := 0xffffffff;
var registers: Register[] := {
	{ "param", 0x8000, 0x8000, 0x8000, 1 },
	{ "iy", 0x4000, 0x4000, 0x6380, 0 },
	{ "ix", 0x2000, 0x2000, 0x6380, 0 },
	{ "bcbc", 0x1000, 0x1206, 0x1c00, 0 },
	{ "dede", 0x800, 0x918, 0x1c00, 0 },
	{ "hlhl", 0x400, 0x4e0, 0x1c00, 0 },
	{ "bc", 0x200, 0x1206, 0x6380, 0 },
	{ "de", 0x100, 0x918, 0x6380, 0 },
	{ "hl", 0x80, 0x4e0, 0x6380, 0 },
	{ "l", 0x40, 0x40, 0x40, 0 },
	{ "h", 0x20, 0x4e0, 0x2b, 0 },
	{ "e", 0x10, 0x10, 0x10, 0 },
	{ "d", 0x8, 0x918, 0x2b, 0 },
	{ "c", 0x4, 0x4, 0x4, 0 },
	{ "b", 0x2, 0x1206, 0x2b, 0 },
	{ "a", 0x1, 0x1, 0x2b, 0 },
};
