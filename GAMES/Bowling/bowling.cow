# Game of Bowling for VT100 compatible terminals
#
# Ladislau Szilagyi, February 2025
#
include "libbasic.coh";
include "libconio.coh";
include "libstr.coh";
include "libfp.coh";
include "libbios.coh";

const REV_BLANK :=	219;

const DOWN_LEFT :=	191;
const DOWN_RIGHT :=	218;
const UP_LEFT :=	217;
const UP_RIGHT :=	192;	

const halfPI :=  0x192;     #fp    PI/2
const PI :=      0x324;     #fp    PI
const twoPI :=   0x648;     #fp    2*PI
const threePI := 0x96C;     #fp    3*PI

const IN_RANGE_B :=	0x200;
const IN_RANGE_P :=	0x400;
const OUT_OF_RANGE :=	0xFF00;

const XMIN := 2;
const XMAX := 124;
const YMIN := 2;
const YMAX := 22;

sub int_part(x: int16): (ret: int16) is
ret := x >> 8;
end sub;

sub f_part(x: int16): (ret: int16) is
ret := x & 0xFF;
end sub;

var XCH: int16;
var YCH: int16;	
var colCH: int16;
var rowCH: int16;
var XCHfp: int16;
var YCHfp: int16;	# fixed point

const STOPPED :=	0;
const MOVING :=		1;
const BASKET :=		2;

const WHITE := 0;
const BLACK := 1;

const ONE_STEP := 1;

var buf: uint8[80];

record _ball is
	color: uint8; 		#WHITE or BLACK
	status: uint8; 		#STOPPED , MOVING or BASKET
	X0: int16;		#vector first ref point
	Y0: int16;
	x0: int16;
	y0: int16;
	lowPartX1Y1: int16;
	X1: int16;		#vector second ref point
	Y1: int16;
	x1: int16;
	y1: int16;
	angle: int16;		#vector angle
	xstart: int16;
	ystart: int16;
	xold: int16;
	yold: int16;
	x: int16;
	y: int16;
	incr: int16;
	ignore: [_ball];	#just collided
end record;

var ball_1: _ball;
var ball_2: _ball;
var ball_3: _ball;
var ball_4: _ball;
var ball_5: _ball;
var ball_6: _ball;
var ball_7: _ball;
var ball_8: _ball;
var ball_9: _ball;
var ball_10: _ball;

var AngleTab: int16[32];

sub abs(n: int16): (ret: int16) is
	if n < 0 then
		ret := -n;
	else
		ret := n;
	end if;
end sub;

var intbuf: uint8[6];

# only positive ints
sub itoa(i: int16): (pbuf: [uint8]) is
        pbuf := &intbuf[5];  # points to terminating zero
        [pbuf] := 0;

        loop
                pbuf := pbuf - 1;
                [pbuf] := '0' + ((i % 10) as uint8);
                i := i / 10;
                if i == 0 then break; end if;
        end loop;
end sub;

sub SetUpAngleTab() is
	AngleTab[31] := 0x100 + xdivytofp(3201 , 10000);
	AngleTab[30] := 0x100 + xdivytofp(2153 , 10000);
	AngleTab[29] := 0x100 + xdivytofp(1343 , 10000);
	AngleTab[28] := 0x100 + xdivytofp(654 , 10000);
	AngleTab[27] := 0x100 + xdivytofp(42 , 10000);
	AngleTab[26] := xdivytofp(9484 , 10000);
	AngleTab[25] := xdivytofp(8966 , 10000);
	AngleTab[24] := xdivytofp(8480 , 10000);
	AngleTab[23] := xdivytofp(8020 , 10000);
	AngleTab[22] := xdivytofp(7580 , 10000);
	AngleTab[21] := xdivytofp(7158 , 10000);
	AngleTab[20] := xdivytofp(6751 , 10000);
	AngleTab[19] := xdivytofp(6357 , 10000);
	AngleTab[18] := xdivytofp(5974 , 10000);
	AngleTab[17] := xdivytofp(5600 , 10000);
	AngleTab[16] := xdivytofp(5235 , 10000);
	AngleTab[15] := xdivytofp(4878 , 10000);
	AngleTab[14] := xdivytofp(4528 , 10000);
	AngleTab[13] := xdivytofp(4183 , 10000);
	AngleTab[12] := xdivytofp(3843 , 10000);
	AngleTab[11] := xdivytofp(3509 , 10000);
	AngleTab[10] := xdivytofp(3178 , 10000);
	AngleTab[9] := xdivytofp(2850 , 10000);
	AngleTab[8] := xdivytofp(2526 , 10000);
	AngleTab[7] := xdivytofp(2205 , 10000);
	AngleTab[6] := xdivytofp(1886 , 10000);
	AngleTab[5] := xdivytofp(1568 , 10000);
	AngleTab[4] := xdivytofp(1253 , 10000);
	AngleTab[3] := xdivytofp(938 , 10000);
	AngleTab[2] := xdivytofp(625 , 10000);
	AngleTab[1] := xdivytofp(312 , 10000);
	AngleTab[0] := 0;
end sub;

# VT100

const ESC := 0x1B;

sub CursorOff() is
	ConOut(ESC);
	ConOut('[');
	ConOut('?');
	ConOut('2');
	ConOut('5');
	ConOut('l');
end sub;

sub CursorOn() is
	ConOut(ESC);
	ConOut('[');
	ConOut('?');
	ConOut('2');
	ConOut('5');
	ConOut('h');
end sub;

sub SetTopLeft() is
	ConOut(ESC);
	ConOut('[');
	ConOut('1');
	ConOut(';');
	ConOut('1');
	ConOut('H');
end sub;

sub SetYX(y: int16, x: int16) is
	ConOut(ESC);
	ConOut('[');
	print(itoa(24-y));
	ConOut(';');
	print(itoa(x+1));
	ConOut('H');
end sub;

sub Clear() is
	ConOut(ESC);
	ConOut('[');
	ConOut('2');
	ConOut('J');
end sub;

sub ClearTopLine() is
	SetTopLeft();
	ConOut(ESC);
	ConOut('[');
	ConOut('K');
end sub;

# print on the first line
sub PrintStr(msg: [uint8]) is
	SetTopLeft();
	print(msg);
end sub;

# ESC [ line ; col H , where line := 0..., col := 0..., (0,0) := top-left
sub PrintChar(y: int16, x: int16, ch: uint8) is
	SetYX(y, x);
	ConOut(ch);
end sub;

sub retball(b: [_ball]): (ret: uint8) is
	if b == &ball_1 then
		ret := 'o';
	else
		ret := '*';
	end if;
end sub;

#x,y fp
sub GetChar(b: [_ball], y:int16, x: int16): (ret: uint8) is
	var row := int_part(y);
	var col := int_part(x);

	var _row := row % 2;
	var _col := col % 2;

	if _col == 0 then
		if _row == 0 then
			if f_part(x) >= 0x80 and f_part(y) >= 0x80 then
				ret := retball(b);
			else
				ret := DOWN_LEFT;
			end if;
		else
			if f_part(x) >= 0x80 and f_part(y) <= 0x80 then
				ret := retball(b);
			else
				ret := UP_LEFT;
			end if;
		end if;
	else
		if _row == 0 then
			if f_part(x) <= 0x80 and f_part(y) >= 0x80 then
				ret := retball(b);
			else
				ret := DOWN_RIGHT;
			end if;
		else
			if f_part(x) <= 0x80 and f_part(y) <= 0x80 then
				ret := retball(b);
			else
				ret := UP_RIGHT;
			end if;
		end if;
	end if;
end sub;

sub show(ball: [_ball], x: int16, y: int16) is
	PrintChar(y >> 9, x >> 9, GetChar(ball, y, x));
end sub;

sub hide(x: int16, y: int16) is
	PrintChar(y >> 9, x >> 9, ' ');
end sub;

# count := integer
sub mult(count: int16, fpval: int16): (ret: int16) is
        ret := 0;

        while count > 0 loop
		ret := ret + fpval;
		count := count - 1;
        end loop;
end sub;

sub show_boundaries() is
	var i: uint8;

	Clear();

	i := 0;
	while i < 64 loop
		PrintChar(12, i as int16, REV_BLANK);
		i := i + 1;
	end loop;

	i := 0;
	while i < 64 loop
		PrintChar(0, i as int16, REV_BLANK);
		i := i + 1;
	end loop;

	i := 1;
	while i < 12 loop
		PrintChar(i as int16, 0, REV_BLANK);
		i := i + 1;
	end loop;
end sub;

sub short_wait() is
	var i: uint8;

	i := 0;
	while i < 200 loop
		i := i + 1;
	end loop;
end sub;

sub vxdivytofp(x: int32, y: int32): (ret: int16) is
	if (x & 0xFFFF0000) != 0 or (y & 0xFFFF0000) != 0 then
		ret := xdivytofp((x >> 16) as int16, (y >> 16) as int16);
	else
		ret := xdivytofp((x & 0xFFFF) as int16, (y & 0xFFFF) as int16);
	end if;
end sub;

sub ltofp(x: int32, y: int32): (ret: int16) is
	var lintp: int32;
	var modulo: int32;
	var intp: int16;

	if x < y then
		ret := vxdivytofp(x, y);
	else
		lintp := x / y;
		intp := (lintp & 0xFFFF) as int16;
		modulo := x - y * lintp;

		if modulo == 0 then
			ret := (intp << 8) as int16;
		else
			ret := (intp << 8) as int16 + vxdivytofp(modulo, y);
		end if;
	end if;
end sub;

#
# Compute distance from a point(xp,yp) to a line(x1,y1,x2,y2)
#
sub DistanceTo(ball: [_ball], collided: [_ball]): (ret: int16) is
	var xp := collided.X0;
	var yp := collided.Y0;
	var a: int16;
	var b: int16;
	var c: int16;
	var f: int16;
	var ff: int32;
	var tmp: int32;
	var dd: int16;

	a := ball.Y0 - ball.Y1;
	b := ball.X1 - ball.X0;
	c := ball.X0 * ball.Y1 - ball.X1 * ball.Y0;

	f := abs(a * xp + b * yp + c);

	if f == 0 then
		ret := 0;
	else
		ff := (f as int32)*(f as int32);
		tmp := (a as int32)*(a as int32) + (b as int32)*(b as int32);

		dd := ltofp(ff, tmp);

		ret := fpsqrt(dd);
	end if;
end sub;

#
# compute angle for vector [(xa,ya),(xb,yb)]
#
sub ComputeAngle(xa: int16, ya: int16, xb: int16, yb: int16): (ret: int16) is	#fixed point
	var tan: int16;
	var angle: int16;

	if yb == ya then
		if xb > xa then
			angle := 0;
		else
			angle := PI;
		end if;
	elseif xb == xa then
		if yb > ya then
			angle := halfPI;
		else
			angle := PI + halfPI;
		end if;
	else
		tan := fpdiv(yb - ya, xb - xa);

		if tan < 0 then
			tan := neg(tan);
		end if;

		angle := fparctan(tan);

		if xb < xa then
			if yb < ya then
				angle := angle + PI;
			else
				angle := PI - angle;
			end if;
		else
			if yb < ya then
				angle := twoPI - angle;
			end if;
		end if;
	end if;

	ret := angle;
end sub;

#
# Try to place a stopped ball in an available place
#
sub SetBallSafeCoord(b: [_ball]) is
	var X: int16;
	var Y: int16;
	var ch: uint8;

	X := int_part(b.xold);
	Y := int_part(b.yold);

	hide(b.xold, b.yold);

	if b.color == WHITE then
		ch := 'o';
	else
		ch := '*';
	end if;

	PrintChar(Y >> 1, X >> 1, ch);

	b.X0 := X;
	b.x0 := X << 8;
	b.Y0 := Y;
	b.y0 := Y << 8;
end sub;

# for ball_1
# returns pointer to collided pin, or
# NULL if no collision
sub CheckCollisionBall(): (ret: [_ball]) is
	if ball_2.status == STOPPED and ball_1.ignore != &ball_2 and (abs(ball_1.x - ball_2.x) < IN_RANGE_B and abs(ball_1.y - ball_2.y) < IN_RANGE_B) then
		ret :=  &ball_2;
		return;
	end if;
	if ball_3.status == STOPPED and ball_1.ignore != &ball_3 and (abs(ball_1.x - ball_3.x) < IN_RANGE_B and abs(ball_1.y - ball_3.y) < IN_RANGE_B) then
		ret :=  &ball_3;
		return;
	end if;
	if ball_4.status == STOPPED and ball_1.ignore != &ball_4 and (abs(ball_1.x - ball_4.x) < IN_RANGE_B and abs(ball_1.y - ball_4.y) < IN_RANGE_B) then
		ret :=  &ball_4;
		return;
	end if;
	if ball_5.status == STOPPED and ball_1.ignore != &ball_5 and (abs(ball_1.x - ball_5.x) < IN_RANGE_B and abs(ball_1.y - ball_5.y) < IN_RANGE_B) then
		ret :=  &ball_5;
		return;
	end if;
	if ball_6.status == STOPPED and ball_1.ignore != &ball_6 and (abs(ball_1.x - ball_6.x) < IN_RANGE_B and abs(ball_1.y - ball_6.y) < IN_RANGE_B) then
		ret :=  &ball_6;
		return;
	end if;
	if ball_7.status == STOPPED and ball_1.ignore != &ball_7 and (abs(ball_1.x - ball_7.x) < IN_RANGE_B and abs(ball_1.y - ball_7.y) < IN_RANGE_B) then
		ret :=  &ball_7;
		return;
	end if;
	if ball_8.status == STOPPED and ball_1.ignore != &ball_8 and (abs(ball_1.x - ball_8.x) < IN_RANGE_B and abs(ball_1.y - ball_8.y) < IN_RANGE_B) then
		ret :=  &ball_8;
		return;
	end if;
	if ball_9.status == STOPPED and ball_1.ignore != &ball_9 and (abs(ball_1.x - ball_9.x) < IN_RANGE_B and abs(ball_1.y - ball_9.y) < IN_RANGE_B) then
		ret :=  &ball_9;
		return;
	end if;
	if ball_10.status == STOPPED and ball_1.ignore != &ball_10 and (abs(ball_1.x - ball_10.x) < IN_RANGE_B and abs(ball_1.y - ball_10.y) < IN_RANGE_B) then		
		ret :=  &ball_10;
		return;
	end if;
	ret := nil;
end sub;

# for pin 2...10
# returns pointer to collided pin, or
# NULL if no collision
sub CheckCollisionPin(b: [_ball]): (ret: [_ball]) is
	if ball_2.status == STOPPED and b != &ball_2 and (abs(b.x - ball_2.x) < IN_RANGE_P and abs(b.y - ball_2.y) < IN_RANGE_P) then
		ret :=  &ball_2;
		return;
	end if;
	if ball_3.status == STOPPED and b != &ball_3 and (abs(b.x - ball_3.x) < IN_RANGE_P and abs(b.y - ball_3.y) < IN_RANGE_P) then
		ret :=  &ball_3;
		return;
	end if;
	if ball_4.status == STOPPED and b != &ball_4 and (abs(b.x - ball_4.x) < IN_RANGE_P and abs(b.y - ball_4.y) < IN_RANGE_P) then
		ret :=  &ball_4;
		return;
	end if;
	if ball_5.status == STOPPED and b != &ball_5 and (abs(b.x - ball_5.x) < IN_RANGE_P and abs(b.y - ball_5.y) < IN_RANGE_P) then
		ret :=  &ball_5;
		return;
	end if;
	if ball_6.status == STOPPED and b != &ball_6 and (abs(b.x - ball_6.x) < IN_RANGE_P and abs(b.y - ball_6.y) < IN_RANGE_P) then
		ret :=  &ball_6;
		return;
	end if;
	if ball_7.status == STOPPED and b != &ball_7 and (abs(b.x - ball_7.x) < IN_RANGE_P and abs(b.y - ball_7.y) < IN_RANGE_P) then
		ret :=  &ball_7;
		return;
	end if;
	if ball_8.status == STOPPED and b != &ball_8 and (abs(b.x - ball_8.x) < IN_RANGE_P and abs(b.y - ball_8.y) < IN_RANGE_P) then
		ret :=  &ball_8;
		return;
	end if;
	if ball_9.status == STOPPED and b != &ball_9 and (abs(b.x - ball_9.x) < IN_RANGE_P and abs(b.y - ball_9.y) < IN_RANGE_P) then
		ret :=  &ball_9;
		return;
	end if;
	if ball_10.status == STOPPED and b != &ball_10 and (abs(b.x - ball_10.x) < IN_RANGE_P and abs(b.y - ball_10.y) < IN_RANGE_P) then
		ret :=  &ball_10;
		return;
	end if;

	ret := nil;
end sub;

sub CheckCollision(b: [_ball]): (ret: [_ball]) is
	if b == &ball_1 then
		ret :=  CheckCollisionBall();
	else
		ret :=  CheckCollisionPin(b);
	end if;
end sub;

#
# Start the movement of a ball
#
sub StartBall(b: [_ball], xstart: int16, ystart: int16, angle: int16, ignore_b: [_ball]) is
	b.status := MOVING;

	b.xstart := xstart;
	b.xold := xstart;
	b.x := xstart;

	b.ystart := ystart;
	b.yold := ystart;
	b.y := ystart;

	b.angle := angle;
	b.incr := ONE_STEP;

	b.lowPartX1Y1 := 0x7FFF;
	b.ignore := ignore_b;
end sub;

#
# Bounce ball
# in: xstart, ystart, angle
# out: x0, X0, y0, Y0, x1, X1, y1, Y1, angle, incr, xstart, ystart, xold, yold
#
sub BounceBall(b: [_ball], angle: int16) is
	SetBallSafeCoord(b);

	b.lowPartX1Y1 := 0x7FFF;

	b.xstart := b.xold;
	b.x := b.xold;

	b.ystart := b.yold;
	b.y := b.yold;

	b.angle := angle;
	b.incr := ONE_STEP;

	b.ignore := nil;
end sub;

# handle balls & pins collision
#
sub HandleCollision(b: [_ball], collided: [_ball]) is
	var distance:int16;
	var alpha: int16;

	if b != &ball_1 then
		#pin hits pin, throw them to the basket!
		b.status := BASKET;
		collided.status := BASKET;

		hide(b.xold, b.yold);
		b.x := OUT_OF_RANGE;
		b.y := OUT_OF_RANGE;

		hide(collided.x, collided.y);
		collided.x := OUT_OF_RANGE;
		collided.y := OUT_OF_RANGE;

		return;
	end if;

	# white ball hits pin

	distance := DistanceTo(b, collided);

	if distance >= IN_RANGE_B then
		return;
	end if;

	#determine collision parameters

	if distance < 0x010 then
		#stop & throw white ball
		b.status := BASKET;

		#hide white ball
		hide(b.xold, b.yold);
		b.x := OUT_OF_RANGE;
		b.y := OUT_OF_RANGE;

		#transfer angle to collided ball
		StartBall(collided, collided.x0, collided.y0, b.angle, b); 
	else
		#distance := 0x010 ... 0x1FF

		SetBallSafeCoord(b);

		alpha := AngleTab[(distance >> 4) as uint8];	# the angle between the two vectors

		if b.angle < ComputeAngle(b.x0, b.y0, collided.x0, collided.y0) then
			collided.angle := b.angle + alpha;
			if collided.angle > twoPI then
				collided.angle := collided.angle - twoPI;
			end if;
			b.angle := b.angle - halfPI + alpha;
			if b.angle < 0 then
				b.angle := twoPI + b.angle;
			end if;
		else
			collided.angle := b.angle - alpha;
			if collided.angle < 0 then
				collided.angle := twoPI + collided.angle;
			end if;
			b.angle := b.angle + halfPI - alpha;
			if b.angle > twoPI then
				b.angle := b.angle - twoPI;
			end if;
		end if;

		StartBall(b, b.x0, b.y0, b.angle, collided); 
		StartBall(collided, collided.x0, collided.y0, collided.angle, b);
	end if;
end sub;

sub HandleBall(b: [_ball]) is
	var collided: [_ball];
	var xmove: int16;
	var ymove: int16;
	var angle: int16;

	short_wait();           # wait a little for each step, then...

	if b.status == MOVING then
			xmove := 0;
			ymove := 0;

                       	# compute crt coord, using the start coord, the crt distance and the crt angle
                       	b.x := b.xstart + mult(b.incr, fpcos(b.angle));
                       	b.y := b.ystart + mult(b.incr, fpsin(b.angle));

                       	if int_part(b.x) != int_part(b.xold) or int_part(b.y) != int_part(b.yold) then
       				xmove := int_part(b.x) - int_part(b.xold);
				ymove := int_part(b.y) - int_part(b.yold);

				#handle X1,Y1
				if b.lowPartX1Y1 > f_part(b.x) + f_part(b.y) then
					b.lowPartX1Y1 := f_part(b.x) + f_part(b.y);
					b.X1 := int_part(b.x);
					b.Y1 := int_part(b.y);
				end if;
			end if;

                       	# handle hitting the boundaries
                       	if xmove > 0 and int_part(b.x) > XMAX then
				hide(b.xold, b.yold);
				b.status := BASKET;
				b.x := OUT_OF_RANGE;
				b.y := OUT_OF_RANGE;
				return;
			end if;

			if xmove < 0 and int_part(b.x) <= XMIN then
				if b != &ball_1 then
					#it is a pin...
					hide(b.xold, b.yold);
					b.x := OUT_OF_RANGE;
					b.y := OUT_OF_RANGE;
					b.status := BASKET;
					return;
				end if;

                               	# compute new angle
                               	if b.angle > PI then
                                     	angle := threePI - b.angle;
                               	else
                                       	angle := PI - b.angle;
				end if;

				BounceBall(b, angle);

				return;
			end if;

                       	if ymove != 0 and int_part(b.y) <= YMIN then
				if b != &ball_1 then
					#it is a pin...
					hide(b.xold, b.yold);
					b.x := OUT_OF_RANGE;
					b.y := OUT_OF_RANGE;
					b.status := BASKET;
					return;
				end if;

                               	# compute new angle
                               	angle := twoPI - b.angle;

				BounceBall(b, angle);

				return;
			end if;

                       	if ymove != 0 and int_part(b.y) > YMAX then
				if b != &ball_1 then
					#it is a pin...
					hide(b.xold, b.yold);
					b.x := OUT_OF_RANGE;
					b.y := OUT_OF_RANGE;
					b.status := BASKET;
					return;
				end if;

                               	# compute new angle
                               	angle := twoPI - b.angle;

				BounceBall(b, angle);

				return;
			end if;

			hide(b.xold, b.yold);
			b.xold := b.x;
			b.yold := b.y;
			show(b, b.x, b.y);

                        b.incr := b.incr + ONE_STEP;      # ... continue the movement using the old angle

			if xmove != 0 or ymove != 0 then
				# if ball moved, check for possible collision
				collided := CheckCollision(b);
				if collided != nil then
					HandleCollision(b, collided);
				end if;
			end if;	
	end if;
end sub;

sub set_pins_coord() is
	ball_2.X0 := 52*2+1;
	ball_2.Y0 := 6*2+1;
	ball_2.x0 := ball_2.X0 << 8;
	ball_2.x := ball_2.X0 << 8;
	ball_2.y0 := ball_2.Y0 << 8;
	ball_2.y := ball_2.Y0 << 8;

	ball_3.X0 := 57*2+1;
	ball_3.Y0 := 8*2+1;
	ball_3.x0 := ball_3.X0 << 8;
	ball_3.x := ball_3.X0 << 8;
	ball_3.y0 := ball_3.Y0 << 8;
	ball_3.y := ball_3.Y0 << 8;

	ball_4.X0 := 57*2+1;
	ball_4.Y0 := 6*2+1;
	ball_4.x0 := ball_4.X0 << 8;
	ball_4.x := ball_4.X0 << 8;
	ball_4.y0 := ball_4.Y0 << 8;
	ball_4.y := ball_4.Y0 << 8;

	ball_5.X0 := 57*2+1;
	ball_5.Y0 := 4*2+1;
	ball_5.x0 := ball_5.X0 << 8;
	ball_5.x := ball_5.X0 << 8;
	ball_5.y0 := ball_5.Y0 << 8;
	ball_5.y := ball_5.Y0 << 8;

	ball_6.X0 := 62*2+1;
	ball_6.Y0 := 10*2+1;
	ball_6.x0 := ball_6.X0 << 8;
	ball_6.x := ball_6.X0 << 8;
	ball_6.y0 := ball_6.Y0 << 8;
	ball_6.y := ball_6.Y0 << 8;

	ball_7.X0 := 62*2+1;
	ball_7.Y0 := 8*2+1;
	ball_7.x0 := ball_7.X0 << 8;
	ball_7.x := ball_7.X0 << 8;
	ball_7.y0 := ball_7.Y0 << 8;
	ball_7.y := ball_7.Y0 << 8;

	ball_8.X0 := 62*2+1;
	ball_8.Y0 := 6*2+1;
	ball_8.x0 := ball_8.X0 << 8;
	ball_8.x := ball_8.X0 << 8;
	ball_8.y0 := ball_8.Y0 << 8;
	ball_8.y := ball_8.Y0 << 8;

	ball_9.X0 := 62*2+1;
	ball_9.Y0 := 4*2+1;
	ball_9.x0 := ball_9.X0 << 8;
	ball_9.x := ball_9.X0 << 8;
	ball_9.y0 := ball_9.Y0 << 8;
	ball_9.y := ball_9.Y0 << 8;

	ball_10.X0 := 62*2+1;
	ball_10.Y0 := 2*2+1;
	ball_10.x0 := ball_10.X0 << 8;
	ball_10.x := ball_10.X0 << 8;
	ball_10.y0 := ball_10.Y0 << 8;
	ball_10.y := ball_10.Y0 << 8;

	ball_2.color := BLACK;
	ball_3.color := BLACK;
	ball_4.color := BLACK;
	ball_5.color := BLACK;
	ball_6.color := BLACK;
	ball_7.color := BLACK;
	ball_8.color := BLACK;
	ball_9.color := BLACK;
	ball_10.color := BLACK;

	ball_2.status := STOPPED;
	ball_3.status := STOPPED;
	ball_4.status := STOPPED;
	ball_5.status := STOPPED;
	ball_6.status := STOPPED;
	ball_7.status := STOPPED;
	ball_8.status := STOPPED;
	ball_9.status := STOPPED;
	ball_10.status := STOPPED;
	
	PrintChar(ball_2.Y0 >> 1, ball_2.X0 >> 1, '*');
	PrintChar(ball_3.Y0 >> 1, ball_3.X0 >> 1, '*');
	PrintChar(ball_4.Y0 >> 1, ball_4.X0 >> 1, '*');
	PrintChar(ball_5.Y0 >> 1, ball_5.X0 >> 1, '*');
	PrintChar(ball_6.Y0 >> 1, ball_6.X0 >> 1, '*');
	PrintChar(ball_7.Y0 >> 1, ball_7.X0 >> 1, '*');
	PrintChar(ball_8.Y0 >> 1, ball_8.X0 >> 1, '*');
	PrintChar(ball_9.Y0 >> 1, ball_9.X0 >> 1, '*');
	PrintChar(ball_10.Y0 >> 1, ball_10.X0 >> 1, '*');
end sub;

sub place_CH() is
	XCH := 3*2;
	YCH := 6*2;

	XCHfp := XCH << 8;
	colCH := XCH >> 1;

	YCHfp := YCH << 8;
	rowCH := YCH >> 1;
end sub;

sub move_up_ch() is
	if rowCH < 11 then						
		rowCH := rowCH + 1;
	end if;
end sub;

sub move_down_ch() is
	if rowCH > 1 then						
		rowCH := rowCH - 1;
	end if;
end sub;

sub move_left_ch() is
	if colCH > 3 then
		colCH := colCH - 1; 
	end if;
end sub;

sub move_right_ch() is
	if colCH < 51 then
		colCH := colCH + 1;
	end if;
end sub;

#returns 1 if CR was hit
sub MoveCH(dir:uint8): (ret: uint8) is
	PrintChar(rowCH, colCH, ' ');

	case dir is
		when 'x':	move_down_ch(); 
		when 'e':	move_up_ch(); 
		when 's':	move_left_ch();
		when 'd':	move_right_ch(); 
	end case;

	PrintChar(rowCH, colCH, '+');
	
	if dir == 0xd then
		ret := 1;
	else
		ret := 0;
	end if;
end sub;

	var ch: uint8;
	var attempts: int16 := 0;

	BiosSetup();
	SetUpAngleTab();

	CursorOff();
	Clear();

	print("The little game of bowling\r\n\n");
	print("Your job is to aim (using '+') and hit the nine pins (*)\r\n");
	print(" with the white (o) ball, in order to overthrow them,\r\n");
	print(" in the minimum number of attempts\r\n");
	print("The white ball will bounce back when hitting the rim\r\n");
	print("Hit any key to start:");
	ch := ConIn();

	show_boundaries();		#clear screen, show boundaries

	set_pins_coord();		#set ball & pins positions

	loop
		ball_1.X0 := 1*2+1;
		ball_1.x0 := ball_1.X0 << 8;
		ball_1.x := ball_1.X0 << 8;
		ball_1.Y0 := 6*2+1;
		ball_1.y0 := ball_1.Y0 << 8;
		ball_1.y := ball_1.Y0 << 8;

		ball_1.color := WHITE;

		PrintChar(ball_1.Y0 >> 1, ball_1.X0 >> 1, 'o');

		place_CH();
		PrintChar(rowCH, colCH, '+');

		ClearTopLine();
		PrintStr("q=quit or aim (s=left,d=right,x=down,e=up) then hit <cr>");
	
		ch := ConIn();
	
		if ch == 'q' then
			break;
		end if;
	
		loop
			if MoveCH(ch) != 0 then
				break;
			end if;
		
			ch := ConIn();
		end loop;

		ClearTopLine();

		XCH := (colCH << 1) + 1;
		XCHfp := XCH << 8;
		YCH := (rowCH << 1) + 1;
		YCHfp := YCH << 8;
		
		PrintChar(rowCH, colCH, ' ');	#erase crosshairs

		ball_2.ignore := nil;
		ball_3.ignore := nil;
		ball_4.ignore := nil;
		ball_5.ignore := nil;
		ball_6.ignore := nil;
		ball_7.ignore := nil;
		ball_8.ignore := nil;
		ball_9.ignore := nil;
		ball_10.ignore := nil;

		attempts := attempts + 1;
		StartBall(&ball_1, ball_1.x0, ball_1.y0, ComputeAngle(ball_1.x0, ball_1.y0, XCHfp, YCHfp),  nil);

		while   ball_1.status == MOVING or
			ball_2.status == MOVING or
			ball_3.status == MOVING or
			ball_4.status == MOVING or
			ball_5.status == MOVING or
			ball_6.status == MOVING or
			ball_7.status == MOVING or
			ball_8.status == MOVING or
			ball_9.status == MOVING or
			ball_10.status == MOVING loop
			HandleBall(&ball_1);
			HandleBall(&ball_2);
			HandleBall(&ball_3);
			HandleBall(&ball_4);
			HandleBall(&ball_5);
			HandleBall(&ball_6);
			HandleBall(&ball_7);
			HandleBall(&ball_8);
			HandleBall(&ball_9);
			HandleBall(&ball_10);
		end loop;

		if ball_2.status == BASKET and
		    ball_3.status == BASKET and
		    ball_4.status == BASKET and
		    ball_5.status == BASKET and
		    ball_6.status == BASKET and
		    ball_7.status == BASKET and
		    ball_8.status == BASKET and
		    ball_9.status == BASKET and
		    ball_10.status == BASKET then
			ClearTopLine();
			CopyString("Well done, all the pins were overthrown in ", &buf[0]);
			CopyString(itoa(attempts), &buf[0] + StrLen(&buf[0]));
			CopyString(" attempts! hit any key...", &buf[0] + StrLen(&buf[0]));
			PrintStr(&buf[0]);
			ch := ConIn();
			break;
		end if;

	end loop;

	CursorOn();
	Clear();
	Exit();
